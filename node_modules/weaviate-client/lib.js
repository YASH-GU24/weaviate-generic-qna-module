(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global['weaviate-client'] = factory());
}(this, (function () { 'use strict';

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var GraphQLWhere = /*#__PURE__*/function () {
    function GraphQLWhere(whereObj) {
      _classCallCheck(this, GraphQLWhere);

      this.source = whereObj;
    }

    _createClass(GraphQLWhere, [{
      key: "toString",
      value: function toString() {
        this.parse();
        this.validate();

        if (this.operands) {
          return "{" + "operator:".concat(this.operator, ",") + "operands:[".concat(this.operands, "]") + "}";
        } else {
          // this is an on-value filter
          var valueContent = this.marshalValueContent();
          return "{" + "operator:".concat(this.operator, ",") + "".concat(this.valueType, ":").concat(valueContent, ",") + "path:".concat(JSON.stringify(this.path)) + "}";
        }
      }
    }, {
      key: "marshalValueContent",
      value: function marshalValueContent() {
        if (this.valueType == "valueGeoRange") {
          return this.marshalValueGeoRange();
        }

        return JSON.stringify(this.valueContent);
      }
    }, {
      key: "marshalValueGeoRange",
      value: function marshalValueGeoRange() {
        var parts = [];
        var gc = this.valueContent.geoCoordinates;

        if (gc) {
          var gcParts = [];

          if (gc.latitude) {
            gcParts = [].concat(_toConsumableArray(gcParts), ["latitude:".concat(gc.latitude)]);
          }

          if (gc.longitude) {
            gcParts = [].concat(_toConsumableArray(gcParts), ["longitude:".concat(gc.longitude)]);
          }

          parts = [].concat(_toConsumableArray(parts), ["geoCoordinates:{".concat(gcParts.join(","), "}")]);
        }

        var d = this.valueContent.distance;

        if (d) {
          var dParts = [];

          if (d.max) {
            dParts = [].concat(_toConsumableArray(dParts), ["max:".concat(d.max)]);
          }

          parts = [].concat(_toConsumableArray(parts), ["distance:{".concat(dParts.join(","), "}")]);
        }

        return "{".concat(parts.join(","), "}");
      }
    }, {
      key: "validate",
      value: function validate() {
        if (!this.operator) {
          throw new Error("where filter: operator cannot be empty");
        }

        if (!this.operands) {
          if (!this.valueType) {
            throw new Error("where filter: value<Type> cannot be empty");
          }

          if (!this.path) {
            throw new Error("where filter: path cannot be empty");
          }
        }
      }
    }, {
      key: "parse",
      value: function parse() {
        for (var key in this.source) {
          switch (key) {
            case "operator":
              this.parseOperator(this.source[key]);
              break;

            case "operands":
              this.parseOperands(this.source[key]);
              break;

            case "path":
              this.parsePath(this.source[key]);
              break;

            default:
              if (key.indexOf("value") != 0) {
                throw new Error("where filter: unrecognized key '" + key + "'");
              }

              this.parseValue(key, this.source[key]);
          }
        }
      }
    }, {
      key: "parseOperator",
      value: function parseOperator(op) {
        if (typeof op !== "string") {
          throw new Error("where filter: operator must be a string");
        }

        this.operator = op;
      }
    }, {
      key: "parsePath",
      value: function parsePath(path) {
        if (!Array.isArray(path)) {
          throw new Error("where filter: path must be an array");
        }

        this.path = path;
      }
    }, {
      key: "parseValue",
      value: function parseValue(key, value) {
        switch (key) {
          case "valueString":
          case "valueText":
          case "valueInt":
          case "valueNumber":
          case "valueDate":
          case "valueBoolean":
          case "valueGeoRange":
            break;

          default:
            throw new Error("where filter: unrecognized value prop '" + key + "'");
        }

        this.valueType = key;
        this.valueContent = value;
      }
    }, {
      key: "parseOperands",
      value: function parseOperands(ops) {
        if (!Array.isArray(ops)) {
          throw new Error("where filter: operands must be an array");
        }

        this.operands = ops.map(function (element) {
          return new GraphQLWhere(element).toString();
        }).join(",");
      }
    }]);

    return GraphQLWhere;
  }();

  var Aggregator = function Aggregator(client) {
    var _this = this;

    _classCallCheck(this, Aggregator);

    _defineProperty(this, "withFields", function (fields) {
      _this.fields = fields;
      return _this;
    });

    _defineProperty(this, "withClassName", function (className) {
      _this.className = className;
      return _this;
    });

    _defineProperty(this, "withWhere", function (whereObj) {
      try {
        _this.whereString = new GraphQLWhere(whereObj).toString();
      } catch (e) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), [e]);
      }

      return _this;
    });

    _defineProperty(this, "withLimit", function (limit) {
      _this.limit = limit;
      return _this;
    });

    _defineProperty(this, "withGroupBy", function (groupBy) {
      _this.groupBy = groupBy;
      return _this;
    });

    _defineProperty(this, "validateGroup", function () {
      if (!_this.groupBy) {
        // nothing to check if this optional parameter is not set
        return;
      }

      if (!Array.isArray(_this.groupBy)) {
        throw new Error("groupBy must be an array");
      }
    });

    _defineProperty(this, "validateIsSet", function (prop, name, setter) {
      if (prop == undefined || prop == null || prop.length == 0) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), ["".concat(name, " must be set - set with ").concat(setter)]);
      }
    });

    _defineProperty(this, "validate", function () {
      _this.validateGroup();

      _this.validateIsSet(_this.className, "className", ".withClassName(className)");

      _this.validateIsSet(_this.fields, "fields", ".withFields(fields)");
    });

    _defineProperty(this, "do", function () {
      var params = "";

      _this.validate();

      if (_this.errors.length > 0) {
        return Promise.reject(new Error("invalid usage: " + _this.errors.join(", ")));
      }

      if (_this.whereString || _this.limit || _this.groupBy) {
        var args = [];

        if (_this.whereString) {
          args = [].concat(_toConsumableArray(args), ["where:".concat(_this.whereString)]);
        }

        if (_this.groupBy) {
          args = [].concat(_toConsumableArray(args), ["groupBy:".concat(JSON.stringify(_this.groupBy))]);
        }

        if (_this.limit) {
          args = [].concat(_toConsumableArray(args), ["limit:".concat(_this.limit)]);
        }

        params = "(".concat(args.join(","), ")");
      }

      return _this.client.query("{Aggregate{".concat(_this.className).concat(params, "{").concat(_this.fields, "}}}"));
    });

    this.client = client;
    this.errors = [];
  };
  module.exports = Aggregator;

  var GraphQLNearText = /*#__PURE__*/function () {
    function GraphQLNearText(nearTextObj) {
      _classCallCheck(this, GraphQLNearText);

      this.source = nearTextObj;
    }

    _createClass(GraphQLNearText, [{
      key: "toString",
      value: function toString() {
        var wrap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        this.parse();
        this.validate();
        var args = ["concepts:".concat(JSON.stringify(this.concepts))]; // concepts must always be set

        if (this.certainty) {
          args = [].concat(_toConsumableArray(args), ["certainty:".concat(this.certainty)]);
        }

        if (this.moveTo) {
          var moveToArgs = ["concepts:".concat(JSON.stringify(this.moveToConcepts))];

          if (this.moveToForce) {
            moveToArgs = [].concat(_toConsumableArray(moveToArgs), ["force:".concat(this.moveToForce)]);
          }

          args = [].concat(_toConsumableArray(args), ["moveTo:{".concat(moveToArgs.join(","), "}")]);
        }

        if (this.moveAwayFrom) {
          var moveAwayFromArgs = ["concepts:".concat(JSON.stringify(this.moveAwayFromConcepts))];

          if (this.moveAwayFromForce) {
            moveAwayFromArgs = [].concat(_toConsumableArray(moveAwayFromArgs), ["force:".concat(this.moveAwayFromForce)]);
          }

          args = [].concat(_toConsumableArray(args), ["moveAwayFrom:{".concat(moveAwayFromArgs.join(","), "}")]);
        }

        if (!wrap) {
          return "".concat(args.join(","));
        }

        return "{".concat(args.join(","), "}");
      }
    }, {
      key: "validate",
      value: function validate() {
        if (!this.concepts) {
          throw new Error("nearText filter: concepts cannot be empty");
        }

        if (this.moveTo) {
          if (!this.moveToForce || !this.moveToConcepts) {
            throw new Error("nearText filter: moveTo must have fields 'concepts' and 'force'");
          }
        }

        if (this.moveAwayFrom) {
          if (!this.moveAwayFromForce || !this.moveAwayFromConcepts) {
            throw new Error("nearText filter: moveAwayFrom must have fields 'concepts' and 'force'");
          }
        }
      }
    }, {
      key: "parse",
      value: function parse() {
        for (var key in this.source) {
          switch (key) {
            case "concepts":
              this.parseConcepts(this.source[key]);
              break;

            case "certainty":
              this.parseCertainty(this.source[key]);
              break;

            case "moveTo":
              this.parseMoveTo(this.source[key]);
              break;

            case "moveAwayFrom":
              this.parseMoveAwayFrom(this.source[key]);
              break;

            default:
              throw new Error("nearText filter: unrecognized key '" + key + "'");
          }
        }
      }
    }, {
      key: "parseConcepts",
      value: function parseConcepts(concepts) {
        if (!Array.isArray(concepts)) {
          throw new Error("nearText filter: concepts must be an array");
        }

        this.concepts = concepts;
      }
    }, {
      key: "parseCertainty",
      value: function parseCertainty(cert) {
        if (typeof cert !== "number") {
          throw new Error("nearText filter: certainty must be a number");
        }

        this.certainty = cert;
      }
    }, {
      key: "parseMoveTo",
      value: function parseMoveTo(target) {
        if (_typeof(target) !== "object") {
          throw new Error("nearText filter: moveTo must be object");
        }

        if (!Array.isArray(target.concepts)) {
          throw new Error("nearText filter: moveTo.concepts must be an array");
        }

        if (target.force && typeof target.force != "number") {
          throw new Error("nearText filter: moveTo.force must be a number");
        }

        this.moveTo = true;
        this.moveToConcepts = target.concepts;
        this.moveToForce = target.force;
      }
    }, {
      key: "parseMoveAwayFrom",
      value: function parseMoveAwayFrom(target) {
        if (_typeof(target) !== "object") {
          throw new Error("nearText filter: moveAwayFrom must be object");
        }

        if (!Array.isArray(target.concepts)) {
          throw new Error("nearText filter: moveAwayFrom.concepts must be an array");
        }

        if (target.force && typeof target.force != "number") {
          throw new Error("nearText filter: moveAwayFrom.force must be a number");
        }

        this.moveAwayFrom = true;
        this.moveAwayFromConcepts = target.concepts;
        this.moveAwayFromForce = target.force;
      }
    }]);

    return GraphQLNearText;
  }();

  var GraphQLNearVector = /*#__PURE__*/function () {
    function GraphQLNearVector(nearVectorObj) {
      _classCallCheck(this, GraphQLNearVector);

      this.source = nearVectorObj;
    }

    _createClass(GraphQLNearVector, [{
      key: "toString",
      value: function toString() {
        var wrap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        this.parse();
        this.validate();
        var args = ["vector:".concat(JSON.stringify(this.vector))]; // vector must always be set

        if (this.certainty) {
          args = [].concat(_toConsumableArray(args), ["certainty:".concat(this.certainty)]);
        }

        if (!wrap) {
          return "".concat(args.join(","));
        }

        return "{".concat(args.join(","), "}");
      }
    }, {
      key: "validate",
      value: function validate() {
        if (!this.vector) {
          throw new Error("nearVector filter: vector cannot be empty");
        }
      }
    }, {
      key: "parse",
      value: function parse() {
        for (var key in this.source) {
          switch (key) {
            case "vector":
              this.parseVector(this.source[key]);
              break;

            case "certainty":
              this.parseCertainty(this.source[key]);
              break;

            default:
              throw new Error("nearVector filter: unrecognized key '" + key + "'");
          }
        }
      }
    }, {
      key: "parseVector",
      value: function parseVector(vector) {
        if (!Array.isArray(vector)) {
          throw new Error("nearVector filter: vector must be an array");
        }

        vector.forEach(function (elem) {
          if (typeof elem !== "number") {
            throw new Error("nearVector filter: vector elements must be a number");
          }
        });
        this.vector = vector;
      }
    }, {
      key: "parseCertainty",
      value: function parseCertainty(cert) {
        if (typeof cert !== "number") {
          throw new Error("nearVector filter: certainty must be a number");
        }

        this.certainty = cert;
      }
    }]);

    return GraphQLNearVector;
  }();

  var GraphQLNearObject = /*#__PURE__*/function () {
    function GraphQLNearObject(nearObjectObj) {
      _classCallCheck(this, GraphQLNearObject);

      this.source = nearObjectObj;
    }

    _createClass(GraphQLNearObject, [{
      key: "toString",
      value: function toString() {
        var wrap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        this.parse();
        this.validate();
        var args = [];

        if (this.id) {
          args = [].concat(_toConsumableArray(args), ["id:".concat(JSON.stringify(this.id))]);
        }

        if (this.beacon) {
          args = [].concat(_toConsumableArray(args), ["beacon:".concat(JSON.stringify(this.beacon))]);
        }

        if (this.certainty) {
          args = [].concat(_toConsumableArray(args), ["certainty:".concat(this.certainty)]);
        }

        if (!wrap) {
          return "".concat(args.join(","));
        }

        return "{".concat(args.join(","), "}");
      }
    }, {
      key: "validate",
      value: function validate() {
        if (!this.id && !this.beacon) {
          throw new Error("nearObject filter: id or beacon needs to be set");
        }
      }
    }, {
      key: "parse",
      value: function parse() {
        for (var key in this.source) {
          switch (key) {
            case "id":
              this.parseID(this.source[key]);
              break;

            case "beacon":
              this.parseBeacon(this.source[key]);
              break;

            case "certainty":
              this.parseCertainty(this.source[key]);
              break;

            default:
              throw new Error("nearObject filter: unrecognized key '" + key + "'");
          }
        }
      }
    }, {
      key: "parseID",
      value: function parseID(id) {
        if (typeof id !== "string") {
          throw new Error("nearObject filter: id must be a string");
        }

        this.id = id;
      }
    }, {
      key: "parseBeacon",
      value: function parseBeacon(beacon) {
        if (typeof beacon !== "string") {
          throw new Error("nearObject filter: beacon must be a string");
        }

        this.beacon = beacon;
      }
    }, {
      key: "parseCertainty",
      value: function parseCertainty(cert) {
        if (typeof cert !== "number") {
          throw new Error("nearObject filter: certainty must be a number");
        }

        this.certainty = cert;
      }
    }]);

    return GraphQLNearObject;
  }();

  var fs = require('fs');

  var GraphQLNearImage = /*#__PURE__*/function () {
    function GraphQLNearImage(nearImageObj) {
      _classCallCheck(this, GraphQLNearImage);

      this.source = nearImageObj;
    }

    _createClass(GraphQLNearImage, [{
      key: "toString",
      value: function toString() {
        var wrap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        this.parse();
        this.validate();
        var args = [];

        if (this.image) {
          var img = this.image;

          if (img.startsWith('data:')) {
            var base64part = ';base64,';
            img = img.substring(img.indexOf(base64part) + base64part.length);
          }

          args = [].concat(_toConsumableArray(args), ["image:".concat(JSON.stringify(img))]);
        }

        if (this.certainty) {
          args = [].concat(_toConsumableArray(args), ["certainty:".concat(this.certainty)]);
        }

        if (!wrap) {
          return "".concat(args.join(","));
        }

        return "{".concat(args.join(","), "}");
      }
    }, {
      key: "validate",
      value: function validate() {
        if (!this.image && !this.imageBlob) {
          throw new Error("nearImage filter: image or imageBlob must be present");
        }
      }
    }, {
      key: "parse",
      value: function parse() {
        for (var key in this.source) {
          switch (key) {
            case "image":
              this.parseImage(this.source[key]);
              break;

            case "certainty":
              this.parseCertainty(this.source[key]);
              break;

            default:
              throw new Error("nearImage filter: unrecognized key '" + key + "'");
          }
        }
      }
    }, {
      key: "parseImage",
      value: function parseImage(image) {
        if (typeof image !== "string") {
          throw new Error("nearImage filter: image must be a string");
        }

        this.image = image;
      }
    }, {
      key: "parseCertainty",
      value: function parseCertainty(cert) {
        if (typeof cert !== "number") {
          throw new Error("nearImage filter: certainty must be a number");
        }

        this.certainty = cert;
      }
    }]);

    return GraphQLNearImage;
  }();

  var GraphQLAsk = /*#__PURE__*/function () {
    function GraphQLAsk(askObj) {
      _classCallCheck(this, GraphQLAsk);

      this.source = askObj;
    }

    _createClass(GraphQLAsk, [{
      key: "toString",
      value: function toString() {
        var wrap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        this.parse();
        this.validate();
        var args = [];

        if (this.question) {
          args = [].concat(_toConsumableArray(args), ["question:".concat(JSON.stringify(this.question))]);
        }

        if (this.properties) {
          args = [].concat(_toConsumableArray(args), ["properties:".concat(JSON.stringify(this.properties))]);
        }

        if (this.certainty) {
          args = [].concat(_toConsumableArray(args), ["certainty:".concat(this.certainty)]);
        }

        if (!wrap) {
          return "".concat(args.join(","));
        }

        return "{".concat(args.join(","), "}");
      }
    }, {
      key: "validate",
      value: function validate() {
        if (!this.question) {
          throw new Error("ask filter: question needs to be set");
        }
      }
    }, {
      key: "parse",
      value: function parse() {
        for (var key in this.source) {
          switch (key) {
            case "question":
              this.parseQuestion(this.source[key]);
              break;

            case "properties":
              this.parseProperties(this.source[key]);
              break;

            case "certainty":
              this.parseCertainty(this.source[key]);
              break;

            default:
              throw new Error("ask filter: unrecognized key '" + key + "'");
          }
        }
      }
    }, {
      key: "parseQuestion",
      value: function parseQuestion(question) {
        if (typeof question !== "string") {
          throw new Error("ask filter: question must be a string");
        }

        this.question = question;
      }
    }, {
      key: "parseProperties",
      value: function parseProperties(properties) {
        if (!Array.isArray(properties)) {
          throw new Error("ask filter: properties must be an array");
        }

        this.properties = properties;
      }
    }, {
      key: "parseCertainty",
      value: function parseCertainty(cert) {
        if (typeof cert !== "number") {
          throw new Error("ask filter: certainty must be a number");
        }

        this.certainty = cert;
      }
    }]);

    return GraphQLAsk;
  }();

  var GraphQLGroup = /*#__PURE__*/function () {
    function GraphQLGroup(source) {
      _classCallCheck(this, GraphQLGroup);

      this.source = source;
    }

    _createClass(GraphQLGroup, [{
      key: "toString",
      value: function toString() {
        var parts = [];

        if (this.source.type) {
          // value is a graphQL enum, so doesn't need to be quoted
          parts = [].concat(_toConsumableArray(parts), ["type:".concat(this.source.type)]);
        }

        if (this.source.force) {
          parts = [].concat(_toConsumableArray(parts), ["force:".concat(this.source.force)]);
        }

        return "{".concat(parts.join(","), "}");
      }
    }]);

    return GraphQLGroup;
  }();

  var Getter = function Getter(client) {
    var _this = this;

    _classCallCheck(this, Getter);

    _defineProperty(this, "withFields", function (fields) {
      _this.fields = fields;
      return _this;
    });

    _defineProperty(this, "withClassName", function (className) {
      _this.className = className;
      return _this;
    });

    _defineProperty(this, "withGroup", function (groupObj) {
      try {
        _this.groupString = new GraphQLGroup(groupObj).toString();
      } catch (e) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), [e]);
      }

      return _this;
    });

    _defineProperty(this, "withWhere", function (whereObj) {
      try {
        _this.whereString = new GraphQLWhere(whereObj).toString();
      } catch (e) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), [e]);
      }

      return _this;
    });

    _defineProperty(this, "withNearText", function (nearTextObj) {
      try {
        _this.nearTextString = new GraphQLNearText(nearTextObj).toString();
      } catch (e) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), [e]);
      }

      return _this;
    });

    _defineProperty(this, "withNearObject", function (nearObjectObj) {
      try {
        _this.nearObjectString = new GraphQLNearObject(nearObjectObj).toString();
      } catch (e) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), [e]);
      }

      return _this;
    });

    _defineProperty(this, "withAsk", function (askObj) {
      try {
        _this.askString = new GraphQLAsk(askObj).toString();
      } catch (e) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), [e]);
      }

      return _this;
    });

    _defineProperty(this, "withNearImage", function (nearImageObj) {
      try {
        _this.nearImageString = new GraphQLNearImage(nearImageObj).toString();
      } catch (e) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), [e]);
      }

      return _this;
    });

    _defineProperty(this, "withNearVector", function (nearVectorObj) {
      try {
        _this.nearVectorString = new GraphQLNearVector(nearVectorObj).toString();
      } catch (e) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), [e]);
      }

      return _this;
    });

    _defineProperty(this, "withLimit", function (limit) {
      _this.limit = limit;
      return _this;
    });

    _defineProperty(this, "validateIsSet", function (prop, name, setter) {
      if (prop == undefined || prop == null || prop.length == 0) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), ["".concat(name, " must be set - set with ").concat(setter)]);
      }
    });

    _defineProperty(this, "validate", function () {
      _this.validateIsSet(_this.className, "className", ".withClassName(className)");

      _this.validateIsSet(_this.fields, "fields", ".withFields(fields)");
    });

    _defineProperty(this, "do", function () {
      var params = "";

      _this.validate();

      if (_this.errors.length > 0) {
        return Promise.reject(new Error("invalid usage: " + _this.errors.join(", ")));
      }

      if (_this.whereString || _this.nearTextString || _this.nearObjectString || _this.nearVectorString || _this.askString || _this.nearImageString || _this.limit || _this.groupString) {
        var args = [];

        if (_this.whereString) {
          args = [].concat(_toConsumableArray(args), ["where:".concat(_this.whereString)]);
        }

        if (_this.nearTextString) {
          args = [].concat(_toConsumableArray(args), ["nearText:".concat(_this.nearTextString)]);
        }

        if (_this.nearObjectString) {
          args = [].concat(_toConsumableArray(args), ["nearObject:".concat(_this.nearObjectString)]);
        }

        if (_this.askString) {
          args = [].concat(_toConsumableArray(args), ["ask:".concat(_this.askString)]);
        }

        if (_this.nearImageString) {
          args = [].concat(_toConsumableArray(args), ["nearImage:".concat(_this.nearImageString)]);
        }

        if (_this.nearVectorString) {
          args = [].concat(_toConsumableArray(args), ["nearVector:".concat(_this.nearVectorString)]);
        }

        if (_this.groupString) {
          args = [].concat(_toConsumableArray(args), ["group:".concat(_this.groupString)]);
        }

        if (_this.limit) {
          args = [].concat(_toConsumableArray(args), ["limit:".concat(_this.limit)]);
        }

        params = "(".concat(args.join(","), ")");
      }

      return _this.client.query("{Get{".concat(_this.className).concat(params, "{").concat(_this.fields, "}}}"));
    });

    this.client = client;
    this.errors = [];
  };

  var validateKind = function validateKind(kind) {
    if (kind != KIND_THINGS && kind != KIND_ACTIONS) {
      throw new Error("invalid kind: " + kind);
    }
  };
  var KIND_THINGS = "things";
  var KIND_ACTIONS = "actions";

  var Explorer = function Explorer(client) {
    var _this = this;

    _classCallCheck(this, Explorer);

    _defineProperty(this, "withFields", function (fields) {
      _this.fields = fields;
      return _this;
    });

    _defineProperty(this, "withLimit", function (limit) {
      _this.limit = limit;
      return _this;
    });

    _defineProperty(this, "withNearText", function (nearTextObj) {
      try {
        _this.nearTextString = new GraphQLNearText(nearTextObj).toString();
      } catch (e) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), [e]);
      }

      return _this;
    });

    _defineProperty(this, "withNearObject", function (nearObjectObj) {
      try {
        _this.nearObjectString = new GraphQLNearObject(nearObjectObj).toString();
      } catch (e) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), [e]);
      }

      return _this;
    });

    _defineProperty(this, "withAsk", function (askObj) {
      try {
        _this.askString = new GraphQLAsk(askObj).toString();
      } catch (e) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), [e]);
      }

      return _this;
    });

    _defineProperty(this, "withNearImage", function (nearImageObj) {
      try {
        _this.nearImageString = new GraphQLNearImage(nearImageObj).toString();
      } catch (e) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), [e]);
      }

      return _this;
    });

    _defineProperty(this, "withNearVector", function (nearVectorObj) {
      try {
        _this.nearVectorString = new GraphQLNearVector(nearVectorObj).toString();
      } catch (e) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), [e]);
      }

      return _this;
    });

    _defineProperty(this, "validateGroup", function () {
      if (!_this.group) {
        // nothing to check if this optional parameter is not set
        return;
      }

      if (!Array.isArray(_this.group)) {
        throw new Error("groupBy must be an array");
      }
    });

    _defineProperty(this, "validateIsSet", function (prop, name, setter) {
      if (prop == undefined || prop == null || prop.length == 0) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), ["".concat(name, " must be set - set with ").concat(setter)]);
      }
    });

    _defineProperty(this, "validateKind", function () {
      try {
        validateKind(_this.kind);
      } catch (e) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), [e.toString()]);
      }
    });

    _defineProperty(this, "validate", function () {
      _this.validateIsSet(_this.fields, "fields", ".withFields(fields)");
    });

    _defineProperty(this, "do", function () {
      var params = "";

      _this.validate();

      if (_this.errors.length > 0) {
        return Promise.reject(new Error("invalid usage: " + _this.errors.join(", ")));
      }

      var args = [];

      if (_this.nearTextString) {
        args = [].concat(_toConsumableArray(args), ["nearText:".concat(_this.nearTextString)]);
      }

      if (_this.nearObjectString) {
        args = [].concat(_toConsumableArray(args), ["nearObject:".concat(_this.nearObjectString)]);
      }

      if (_this.askString) {
        args = [].concat(_toConsumableArray(args), ["ask:".concat(_this.askString)]);
      }

      if (_this.nearImageString) {
        args = [].concat(_toConsumableArray(args), ["nearImage:".concat(_this.nearImageString)]);
      }

      if (_this.nearVectorString) {
        args = [].concat(_toConsumableArray(args), ["nearVector:".concat(_this.nearVectorString)]);
      }

      if (_this.limit) {
        args = [].concat(_toConsumableArray(args), ["limit:".concat(_this.limit)]);
      }

      params = "(".concat(args.join(","), ")");
      return _this.client.query("{Explore".concat(params, "{").concat(_this.fields, "}}"));
    });

    this.client = client;
    this.params = {};
    this.errors = [];
  };

  var graphql = function graphql(client) {
    return {
      get: function get() {
        return new Getter(client);
      },
      aggregate: function aggregate() {
        return new Aggregator(client);
      },
      explore: function explore() {
        return new Explorer(client);
      }
    };
  };

  var ClassCreator = function ClassCreator(client) {
    var _this = this;

    _classCallCheck(this, ClassCreator);

    _defineProperty(this, "withClass", function (classObj) {
      _this["class"] = classObj;
      return _this;
    });

    _defineProperty(this, "validateClass", function () {
      if (_this["class"] == undefined || _this["class"] == null) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), ["class object must be set - set with .withClass(class)"]);
      }
    });

    _defineProperty(this, "validate", function () {
      _this.validateClass();
    });

    _defineProperty(this, "do", function () {
      _this.validate();

      if (_this.errors.length > 0) {
        return Promise.reject(new Error("invalid usage: " + _this.errors.join(", ")));
      }

      var path = "/schema";
      return _this.client.post(path, _this["class"]);
    });

    this.client = client;
    this.errors = [];
  };

  var ClassDeleter = function ClassDeleter(client) {
    var _this = this;

    _classCallCheck(this, ClassDeleter);

    _defineProperty(this, "withClassName", function (className) {
      _this.className = className;
      return _this;
    });

    _defineProperty(this, "validateClassName", function () {
      if (_this.className == undefined || _this.className == null || _this.className.length == 0) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), ["className must be set - set with .withClassName(className)"]);
      }
    });

    _defineProperty(this, "validate", function () {
      _this.validateClassName();
    });

    _defineProperty(this, "do", function () {
      _this.validate();

      if (_this.errors.length > 0) {
        return Promise.reject(new Error("invalid usage: " + _this.errors.join(", ")));
      }

      var path = "/schema/".concat(_this.className);
      return _this.client["delete"](path);
    });

    this.client = client;
    this.errors = [];
  };

  var ClassCreator$1 = function ClassCreator(client) {
    var _this = this;

    _classCallCheck(this, ClassCreator);

    _defineProperty(this, "withClassName", function (className) {
      _this.className = className;
      return _this;
    });

    _defineProperty(this, "withProperty", function (property) {
      _this.property = property;
      return _this;
    });

    _defineProperty(this, "validateClassName", function () {
      if (_this.className == undefined || _this.className == null || _this.className.length == 0) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), ["className must be set - set with .withClassName(className)"]);
      }
    });

    _defineProperty(this, "validateProperty", function () {
      if (_this.property == undefined || _this.property == null || _this.property.length == 0) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), ["property must be set - set with .withProperty(property)"]);
      }
    });

    _defineProperty(this, "validate", function () {
      _this.validateClassName();

      _this.validateProperty();
    });

    _defineProperty(this, "do", function () {
      _this.validate();

      if (_this.errors.length > 0) {
        return Promise.reject(new Error("invalid usage: " + _this.errors.join(", ")));
      }

      var path = "/schema/".concat(_this.className, "/properties");
      return _this.client.post(path, _this.property);
    });

    this.client = client;
    this.errors = [];
  };

  var Getter$1 = function Getter(client) {
    var _this = this;

    _classCallCheck(this, Getter);

    _defineProperty(this, "do", function () {
      if (_this.errors.length > 0) {
        return Promise.reject(new Error("invalid usage: " + _this.errors.join(", ")));
      }

      var path = "/schema";
      return _this.client.get(path);
    });

    this.client = client;
    this.errors = [];
  };

  var schema = function schema(client) {
    return {
      classCreator: function classCreator() {
        return new ClassCreator(client);
      },
      classDeleter: function classDeleter() {
        return new ClassDeleter(client);
      },
      getter: function getter() {
        return new Getter$1(client);
      },
      propertyCreator: function propertyCreator() {
        return new ClassCreator$1(client);
      }
    };
  };

  var Creator = function Creator(client) {
    var _this = this;

    _classCallCheck(this, Creator);

    _defineProperty(this, "withClassName", function (className) {
      _this.className = className;
      return _this;
    });

    _defineProperty(this, "withProperties", function (properties) {
      _this.properties = properties;
      return _this;
    });

    _defineProperty(this, "withId", function (id) {
      _this.id = id;
      return _this;
    });

    _defineProperty(this, "validateClassName", function () {
      if (_this.className == undefined || _this.className == null || _this.className.length == 0) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), ["className must be set - set with .withClassName(className)"]);
      }
    });

    _defineProperty(this, "payload", function () {
      return {
        properties: _this.properties,
        "class": _this.className,
        id: _this.id
      };
    });

    _defineProperty(this, "validate", function () {
      _this.validateClassName();
    });

    _defineProperty(this, "do", function () {
      _this.validate();

      if (_this.errors.length > 0) {
        return Promise.reject(new Error("invalid usage: " + _this.errors.join(", ")));
      }

      var path = "/objects";
      return _this.client.post(path, _this.payload());
    });

    this.client = client;
    this.errors = [];
  };

  var Validator = function Validator(client) {
    var _this = this;

    _classCallCheck(this, Validator);

    _defineProperty(this, "withClassName", function (className) {
      _this.className = className;
      return _this;
    });

    _defineProperty(this, "withProperties", function (properties) {
      _this.properties = properties;
      return _this;
    });

    _defineProperty(this, "withId", function (id) {
      _this.id = id;
      return _this;
    });

    _defineProperty(this, "validateClassName", function () {
      if (_this.className == undefined || _this.className == null || _this.className.length == 0) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), ["className must be set - set with .withClassName(className)"]);
      }
    });

    _defineProperty(this, "payload", function () {
      return {
        properties: _this.properties,
        "class": _this.className,
        id: _this.id
      };
    });

    _defineProperty(this, "validate", function () {
      _this.validateClassName();
    });

    _defineProperty(this, "do", function () {
      _this.validate();

      if (_this.errors.length > 0) {
        return Promise.reject(new Error("invalid usage: " + _this.errors.join(", ")));
      }

      var path = "/objects/validate";
      return _this.client.post(path, _this.payload(), false).then(function () {
        return true;
      });
    });

    this.client = client;
    this.errors = [];
  };

  var Updater = function Updater(client) {
    var _this = this;

    _classCallCheck(this, Updater);

    _defineProperty(this, "withProperties", function (properties) {
      _this.properties = properties;
      return _this;
    });

    _defineProperty(this, "withId", function (id) {
      _this.id = id;
      return _this;
    });

    _defineProperty(this, "withClassName", function (className) {
      _this.className = className;
      return _this;
    });

    _defineProperty(this, "validateClassName", function () {
      if (_this.className == undefined || _this.className == null || _this.className.length == 0) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), ["className must be set - set with withId(id)"]);
      }
    });

    _defineProperty(this, "validateId", function () {
      if (_this.id == undefined || _this.id == null || _this.id.length == 0) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), ["id must be set - initialize with updater(id)"]);
      }
    });

    _defineProperty(this, "payload", function () {
      return {
        properties: _this.properties,
        "class": _this.className,
        id: _this.id
      };
    });

    _defineProperty(this, "validate", function () {
      _this.validateClassName();

      _this.validateId();
    });

    _defineProperty(this, "do", function () {
      _this.validate();

      if (_this.errors.length > 0) {
        return Promise.reject(new Error("invalid usage: " + _this.errors.join(", ")));
      }

      var path = "/objects/".concat(_this.id);
      return _this.client.put(path, _this.payload());
    });

    this.client = client;
    this.errors = [];
  };

  var Merger = function Merger(client) {
    var _this = this;

    _classCallCheck(this, Merger);

    _defineProperty(this, "withProperties", function (properties) {
      _this.properties = properties;
      return _this;
    });

    _defineProperty(this, "withClassName", function (className) {
      _this.className = className;
      return _this;
    });

    _defineProperty(this, "withId", function (id) {
      _this.id = id;
      return _this;
    });

    _defineProperty(this, "validateClassName", function () {
      if (_this.className == undefined || _this.className == null || _this.className.length == 0) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), ["className must be set - set with withClassName(className)"]);
      }
    });

    _defineProperty(this, "validateId", function () {
      if (_this.id == undefined || _this.id == null || _this.id.length == 0) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), ["id must be set - set with withId(id)"]);
      }
    });

    _defineProperty(this, "payload", function () {
      return {
        properties: _this.properties,
        "class": _this.className,
        id: _this.id
      };
    });

    _defineProperty(this, "validate", function () {
      _this.validateClassName();

      _this.validateId();
    });

    _defineProperty(this, "do", function () {
      _this.validate();

      if (_this.errors.length > 0) {
        return Promise.reject(new Error("invalid usage: " + _this.errors.join(", ")));
      }

      var path = "/objects/".concat(_this.id);
      return _this.client.patch(path, _this.payload());
    });

    this.client = client;
    this.errors = [];
  };

  var Getter$2 = function Getter(client) {
    var _this = this;

    _classCallCheck(this, Getter);

    _defineProperty(this, "withLimit", function (limit) {
      _this.limit = limit;
      return _this;
    });

    _defineProperty(this, "extendAdditionals", function (prop) {
      _this.additionals = [].concat(_toConsumableArray(_this.additionals), [prop]);
      return _this;
    });

    _defineProperty(this, "withAdditional", function (additionalFlag) {
      return _this.extendAdditionals(additionalFlag);
    });

    _defineProperty(this, "withVector", function () {
      return _this.extendAdditionals("vector");
    });

    _defineProperty(this, "do", function () {
      if (_this.errors.length > 0) {
        return Promise.reject(new Error("invalid usage: " + _this.errors.join(", ")));
      }

      var path = "/objects";
      var params = [];

      if (_this.additionals.length > 0) {
        params = [].concat(_toConsumableArray(params), ["include=".concat(_this.additionals.join(","))]);
      }

      if (_this.limit) {
        params = [].concat(_toConsumableArray(params), ["limit=".concat(_this.limit)]);
      }

      if (params.length > 0) {
        path += "?".concat(params.join("&"));
      }

      return _this.client.get(path);
    });

    this.client = client;
    this.errors = [];
    this.additionals = [];
  };

  var GetterById = function GetterById(client) {
    var _this = this;

    _classCallCheck(this, GetterById);

    _defineProperty(this, "withId", function (id) {
      _this.id = id;
      return _this;
    });

    _defineProperty(this, "extendAdditionals", function (prop) {
      _this.additionals = [].concat(_toConsumableArray(_this.additionals), [prop]);
      return _this;
    });

    _defineProperty(this, "extendAdditionals", function (prop) {
      _this.additionals = [].concat(_toConsumableArray(_this.additionals), [prop]);
      return _this;
    });

    _defineProperty(this, "withAdditional", function (additionalFlag) {
      return _this.extendAdditionals(additionalFlag);
    });

    _defineProperty(this, "withVector", function () {
      return _this.extendAdditionals("vector");
    });

    _defineProperty(this, "validateId", function () {
      if (_this.id == undefined || _this.id == null || _this.id.length == 0) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), ["id must be set - initialize with getterById(id)"]);
      }
    });

    _defineProperty(this, "validate", function () {
      _this.validateId();
    });

    _defineProperty(this, "do", function () {
      _this.validate();

      if (_this.errors.length > 0) {
        return Promise.reject(new Error("invalid usage: " + _this.errors.join(", ")));
      }

      var path = "/objects/".concat(_this.id);

      if (_this.additionals.length > 0) {
        path += "?include=".concat(_this.additionals.join(","));
      }

      return _this.client.get(path);
    });

    this.client = client;
    this.errors = [];
    this.additionals = [];
  };

  var Deleter = function Deleter(client) {
    var _this = this;

    _classCallCheck(this, Deleter);

    _defineProperty(this, "withId", function (id) {
      _this.id = id;
      return _this;
    });

    _defineProperty(this, "validateIsSet", function (prop, name, setter) {
      if (prop == undefined || prop == null || prop.length == 0) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), ["".concat(name, " must be set - set with ").concat(setter)]);
      }
    });

    _defineProperty(this, "validateId", function () {
      _this.validateIsSet(_this.id, "id", ".withId(id)");
    });

    _defineProperty(this, "validate", function () {
      _this.validateId();
    });

    _defineProperty(this, "do", function () {
      if (_this.errors.length > 0) {
        return Promise.reject(new Error("invalid usage: " + _this.errors.join(", ")));
      }

      _this.validate();

      var path = "/objects/".concat(_this.id);
      return _this.client["delete"](path);
    });

    this.client = client;
    this.errors = [];
  };

  var ReferenceCreator = function ReferenceCreator(client) {
    var _this = this;

    _classCallCheck(this, ReferenceCreator);

    _defineProperty(this, "withId", function (id) {
      _this.id = id;
      return _this;
    });

    _defineProperty(this, "withReference", function (ref) {
      _this.reference = ref;
      return _this;
    });

    _defineProperty(this, "withReferenceProperty", function (refProp) {
      _this.refProp = refProp;
      return _this;
    });

    _defineProperty(this, "validateIsSet", function (prop, name, setter) {
      if (prop == undefined || prop == null || prop.length == 0) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), ["".concat(name, " must be set - set with ").concat(setter)]);
      }
    });

    _defineProperty(this, "validate", function () {
      _this.validateIsSet(_this.id, "id", ".withId(id)");

      _this.validateIsSet(_this.reference, "reference", ".withReference(ref)");

      _this.validateIsSet(_this.refProp, "referenceProperty", ".withReferenceProperty(refProp)");
    });

    _defineProperty(this, "payload", function () {
      return _this.reference;
    });

    _defineProperty(this, "do", function () {
      _this.validate();

      if (_this.errors.length > 0) {
        return Promise.reject(new Error("invalid usage: " + _this.errors.join(", ")));
      }

      var path = "/objects/".concat(_this.id, "/references/").concat(_this.refProp);
      return _this.client.post(path, _this.payload(), false);
    });

    this.client = client;
    this.errors = [];
  };

  var ReferenceReplacer = function ReferenceReplacer(client) {
    var _this = this;

    _classCallCheck(this, ReferenceReplacer);

    _defineProperty(this, "withId", function (id) {
      _this.id = id;
      return _this;
    });

    _defineProperty(this, "withReferences", function (refs) {
      _this.references = refs;
      return _this;
    });

    _defineProperty(this, "withReferenceProperty", function (refProp) {
      _this.refProp = refProp;
      return _this;
    });

    _defineProperty(this, "validateIsSet", function (prop, name, setter) {
      if (prop == undefined || prop == null || prop.length == 0) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), ["".concat(name, " must be set - set with ").concat(setter)]);
      }
    });

    _defineProperty(this, "validate", function () {
      _this.validateIsSet(_this.id, "id", ".withId(id)");

      _this.validateIsSet(_this.refProp, "referenceProperty", ".withReferenceProperty(refProp)");
    });

    _defineProperty(this, "payload", function () {
      return _this.references;
    });

    _defineProperty(this, "do", function () {
      _this.validate();

      if (_this.errors.length > 0) {
        return Promise.reject(new Error("invalid usage: " + _this.errors.join(", ")));
      }

      var path = "/objects/".concat(_this.id, "/references/").concat(_this.refProp);
      return _this.client.put(path, _this.payload(), false);
    });

    this.client = client;
    this.errors = [];
  };

  var ReferenceDeleter = function ReferenceDeleter(client) {
    var _this = this;

    _classCallCheck(this, ReferenceDeleter);

    _defineProperty(this, "withId", function (id) {
      _this.id = id;
      return _this;
    });

    _defineProperty(this, "withReference", function (ref) {
      _this.reference = ref;
      return _this;
    });

    _defineProperty(this, "withReferenceProperty", function (refProp) {
      _this.refProp = refProp;
      return _this;
    });

    _defineProperty(this, "validateIsSet", function (prop, name, setter) {
      if (prop == undefined || prop == null || prop.length == 0) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), ["".concat(name, " must be set - set with ").concat(setter)]);
      }
    });

    _defineProperty(this, "validate", function () {
      _this.validateIsSet(_this.id, "id", ".withId(id)");

      _this.validateIsSet(_this.reference, "reference", ".withReference(ref)");

      _this.validateIsSet(_this.refProp, "referenceProperty", ".withReferenceProperty(refProp)");
    });

    _defineProperty(this, "payload", function () {
      return _this.reference;
    });

    _defineProperty(this, "do", function () {
      _this.validate();

      if (_this.errors.length > 0) {
        return Promise.reject(new Error("invalid usage: " + _this.errors.join(", ")));
      }

      var path = "/objects/".concat(_this.id, "/references/").concat(_this.refProp);
      return _this.client["delete"](path, _this.payload(), false);
    });

    this.client = client;
    this.errors = [];
  };

  var ReferencePayloadBuilder = function ReferencePayloadBuilder(client) {
    var _this = this;

    _classCallCheck(this, ReferencePayloadBuilder);

    _defineProperty(this, "withId", function (id) {
      _this.id = id;
      return _this;
    });

    _defineProperty(this, "validateIsSet", function (prop, name, setter) {
      if (prop == undefined || prop == null || prop.length == 0) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), ["".concat(name, " must be set - set with ").concat(setter)]);
      }
    });

    _defineProperty(this, "validate", function () {
      _this.validateIsSet(_this.id, "id", ".withId(id)");
    });

    _defineProperty(this, "payload", function () {
      _this.validate();

      if (_this.errors.length > 0) {
        throw new Error(_this.errors.join(", "));
      }

      return {
        beacon: "weaviate://localhost/".concat(_this.id)
      };
    });

    this.client = client;
    this.errors = [];
  };

  var data = function data(client) {
    return {
      creator: function creator() {
        return new Creator(client);
      },
      validator: function validator() {
        return new Validator(client);
      },
      updater: function updater() {
        return new Updater(client);
      },
      merger: function merger() {
        return new Merger(client);
      },
      getter: function getter() {
        return new Getter$2(client);
      },
      getterById: function getterById() {
        return new GetterById(client);
      },
      deleter: function deleter() {
        return new Deleter(client);
      },
      referenceCreator: function referenceCreator() {
        return new ReferenceCreator(client);
      },
      referenceReplacer: function referenceReplacer() {
        return new ReferenceReplacer(client);
      },
      referenceDeleter: function referenceDeleter() {
        return new ReferenceDeleter(client);
      },
      referencePayloadBuilder: function referencePayloadBuilder() {
        return new ReferencePayloadBuilder(client);
      }
    };
  };

  var Getter$3 = function Getter(client) {
    var _this = this;

    _classCallCheck(this, Getter);

    _defineProperty(this, "withId", function (id) {
      _this.id = id;
      return _this;
    });

    _defineProperty(this, "validateIsSet", function (prop, name, setter) {
      if (prop == undefined || prop == null || prop.length == 0) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), ["".concat(name, " must be set - set with ").concat(setter)]);
      }
    });

    _defineProperty(this, "validateId", function () {
      _this.validateIsSet(_this.id, "id", ".withId(id)");
    });

    _defineProperty(this, "validate", function () {
      _this.validateId();
    });

    _defineProperty(this, "do", function () {
      _this.validate();

      if (_this.errors.length > 0) {
        return Promise.reject(new Error("invalid usage: " + _this.errors.join(", ")));
      }

      var path = "/classifications/".concat(_this.id);
      return _this.client.get(path);
    });

    this.client = client;
    this.errors = [];
  };

  var Scheduler = function Scheduler(client) {
    var _this = this;

    _classCallCheck(this, Scheduler);

    _defineProperty(this, "withType", function (type) {
      _this.type = type;
      return _this;
    });

    _defineProperty(this, "withSettings", function (settings) {
      _this.settings = settings;
      return _this;
    });

    _defineProperty(this, "withClassName", function (className) {
      _this.className = className;
      return _this;
    });

    _defineProperty(this, "withClassifyProperties", function (props) {
      _this.classifyProperties = props;
      return _this;
    });

    _defineProperty(this, "withBasedOnProperties", function (props) {
      _this.basedOnProperties = props;
      return _this;
    });

    _defineProperty(this, "withWaitForCompletion", function () {
      _this.waitForCompletion = true;
      return _this;
    });

    _defineProperty(this, "withWaitTimeout", function (timeout) {
      _this.waitTimeout = timeout;
      return _this;
    });

    _defineProperty(this, "validateIsSet", function (prop, name, setter) {
      if (prop == undefined || prop == null || prop.length == 0) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), ["".concat(name, " must be set - set with ").concat(setter)]);
      }
    });

    _defineProperty(this, "validateClassName", function () {
      _this.validateIsSet(_this.className, "className", ".withClassName(className)");
    });

    _defineProperty(this, "validateBasedOnProperties", function () {
      _this.validateIsSet(_this.basedOnProperties, "basedOnProperties", ".withBasedOnProperties(basedOnProperties)");
    });

    _defineProperty(this, "validateClassifyProperties", function () {
      _this.validateIsSet(_this.classifyProperties, "classifyProperties", ".withClassifyProperties(classifyProperties)");
    });

    _defineProperty(this, "validate", function () {
      _this.validateClassName();

      _this.validateClassifyProperties();

      _this.validateBasedOnProperties();
    });

    _defineProperty(this, "payload", function () {
      return {
        type: _this.type,
        settings: _this.settings,
        "class": _this.className,
        classifyProperties: _this.classifyProperties,
        basedOnProperties: _this.basedOnProperties
      };
    });

    _defineProperty(this, "pollForCompletion", function (id) {
      return new Promise(function (resolve, reject) {
        setTimeout(function () {
          return reject(new Error("classification didn't finish within configured timeout, " + "set larger timeout with .withWaitTimeout(timeout)"));
        }, _this.waitTimeout);
        setInterval(function () {
          new Getter$3(_this.client).withId(id)["do"]().then(function (res) {
            res.status == "completed" && resolve(res);
          });
        }, 500);
      });
    });

    _defineProperty(this, "do", function () {
      if (_this.errors.length > 0) {
        return Promise.reject(new Error("invalid usage: " + _this.errors.join(", ")));
      }

      _this.validate();

      var path = "/classifications";
      return _this.client.post(path, _this.payload()).then(function (res) {
        if (!_this.waitForCompletion) {
          return Promise.resolve(res);
        }

        return _this.pollForCompletion(res.id);
      });
    });

    this.client = client;
    this.errors = [];
    this.waitTimeout = 10 * 60 * 1000; // 10 minutes

    this.waitForCompletion = false;
  };

  var data$1 = function data(client) {
    return {
      scheduler: function scheduler() {
        return new Scheduler(client);
      },
      getter: function getter() {
        return new Getter$3(client);
      }
    };
  };

  var ObjectsBatcher = function ObjectsBatcher(client) {
    var _this = this;

    _classCallCheck(this, ObjectsBatcher);

    _defineProperty(this, "withObject", function (obj) {
      _this.objects = [].concat(_toConsumableArray(_this.objects), [obj]);
      return _this;
    });

    _defineProperty(this, "payload", function () {
      return {
        objects: _this.objects
      };
    });

    _defineProperty(this, "validateObjectCount", function () {
      if (_this.objects.length == 0) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), ["need at least one object to send a request, " + "add one with .withObject(obj)"]);
      }
    });

    _defineProperty(this, "validate", function () {
      _this.validateObjectCount();
    });

    _defineProperty(this, "do", function () {
      _this.validate();

      if (_this.errors.length > 0) {
        return Promise.reject(new Error("invalid usage: " + _this.errors.join(", ")));
      }

      var path = "/batch/objects";
      return _this.client.post(path, _this.payload());
    });

    this.client = client;
    this.objects = [];
    this.errors = [];
  };

  var ReferencesBatcher = function ReferencesBatcher(client) {
    var _this = this;

    _classCallCheck(this, ReferencesBatcher);

    _defineProperty(this, "withReference", function (obj) {
      _this.references = [].concat(_toConsumableArray(_this.references), [obj]);
      return _this;
    });

    _defineProperty(this, "payload", function () {
      return _this.references;
    });

    _defineProperty(this, "validateReferenceCount", function () {
      if (_this.references.length == 0) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), ["need at least one reference to send a request, " + "add one with .withReference(obj)"]);
      }
    });

    _defineProperty(this, "validate", function () {
      _this.validateReferenceCount();
    });

    _defineProperty(this, "do", function () {
      _this.validate();

      if (_this.errors.length > 0) {
        return Promise.reject(new Error("invalid usage: " + _this.errors.join(", ")));
      }

      var path = "/batch/references";
      return _this.client.post(path, _this.payload());
    });

    this.client = client;
    this.references = [];
    this.errors = [];
  };

  var ReferencesBatcher$1 = function ReferencesBatcher(client) {
    var _this = this;

    _classCallCheck(this, ReferencesBatcher);

    _defineProperty(this, "withFromId", function (id) {
      _this.fromId = id;
      return _this;
    });

    _defineProperty(this, "withToId", function (id) {
      _this.toId = id;
      return _this;
    });

    _defineProperty(this, "withFromClassName", function (className) {
      _this.fromClassName = className;
      return _this;
    });

    _defineProperty(this, "withFromRefProp", function (refProp) {
      _this.fromRefProp = refProp;
      return _this;
    });

    _defineProperty(this, "validateIsSet", function (prop, name, setter) {
      if (prop == undefined || prop == null || prop.length == 0) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), ["".concat(name, " must be set - set with ").concat(setter)]);
      }
    });

    _defineProperty(this, "validate", function () {
      _this.validateIsSet(_this.fromId, "fromId", ".withFromId(id)");

      _this.validateIsSet(_this.toId, "toId", ".withToId(id)");

      _this.validateIsSet(_this.fromClassName, "fromClassName", ".withFromClassName(className)");

      _this.validateIsSet(_this.fromRefProp, "fromRefProp", ".withFromRefProp(refProp)");
    });

    _defineProperty(this, "payload", function () {
      _this.validate();

      if (_this.errors.length > 0) {
        throw new Error(_this.errors.join(", "));
      }

      return {
        from: "weaviate://localhost/".concat(_this.fromClassName) + "/".concat(_this.fromId, "/").concat(_this.fromRefProp),
        to: "weaviate://localhost/".concat(_this.toId)
      };
    });

    this.client = client;
    this.errors = [];
  };

  var batch = function batch(client) {
    return {
      objectsBatcher: function objectsBatcher() {
        return new ObjectsBatcher(client);
      },
      referencesBatcher: function referencesBatcher() {
        return new ReferencesBatcher(client);
      },
      referencePayloadBuilder: function referencePayloadBuilder() {
        return new ReferencesBatcher$1(client);
      }
    };
  };

  var LiveChecker = function LiveChecker(client) {
    var _this = this;

    _classCallCheck(this, LiveChecker);

    _defineProperty(this, "do", function () {
      return _this.client.get("/.well-known/live", false).then(function () {
        return Promise.resolve(true);
      })["catch"](function () {
        return Promise.resolve(false);
      });
    });

    this.client = client;
  };

  var ReadyChecker = function ReadyChecker(client) {
    var _this = this;

    _classCallCheck(this, ReadyChecker);

    _defineProperty(this, "do", function () {
      return _this.client.get("/.well-known/live", false).then(function () {
        return Promise.resolve(true);
      })["catch"](function () {
        return Promise.resolve(false);
      });
    });

    this.client = client;
  };

  var MetaGetter = function MetaGetter(client) {
    var _this = this;

    _classCallCheck(this, MetaGetter);

    _defineProperty(this, "do", function () {
      return _this.client.get("/meta", true);
    });

    this.client = client;
  };

  var OpenidConfigurationGetterGetter = function OpenidConfigurationGetterGetter(client) {
    var _this = this;

    _classCallCheck(this, OpenidConfigurationGetterGetter);

    _defineProperty(this, "do", function () {
      return _this.client.getRaw("/.well-known/openid-configuration").then(function (res) {
        if (res.status < 400) {
          return res.json();
        }

        if (res.status == 404) {
          // OIDC is not configured
          return Promise.resolve(undefined);
        }

        return Promise.reject(new Error("unexpected status code: ".concat(res.status)));
      });
    });

    this.client = client;
  };

  var misc = function misc(client) {
    return {
      liveChecker: function liveChecker() {
        return new LiveChecker(client);
      },
      readyChecker: function readyChecker() {
        return new ReadyChecker(client);
      },
      metaGetter: function metaGetter() {
        return new MetaGetter(client);
      },
      openidConfigurationGetter: function openidConfigurationGetter() {
        return new OpenidConfigurationGetterGetter(client);
      }
    };
  };

  var ExtensionCreator = function ExtensionCreator(client) {
    var _this = this;

    _classCallCheck(this, ExtensionCreator);

    _defineProperty(this, "withConcept", function (concept) {
      _this.concept = concept;
      return _this;
    });

    _defineProperty(this, "withDefinition", function (definition) {
      _this.definition = definition;
      return _this;
    });

    _defineProperty(this, "withWeight", function (weight) {
      _this.weight = weight;
      return _this;
    });

    _defineProperty(this, "validateIsSet", function (prop, name, setter) {
      if (prop == undefined || prop == null || prop.length == 0) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), ["".concat(name, " must be set - set with ").concat(setter)]);
      }
    });

    _defineProperty(this, "validate", function () {
      _this.validateIsSet(_this.concept, "concept", "withConcept(concept)");

      _this.validateIsSet(_this.definition, "definition", "withDefinition(definition)");

      _this.validateIsSet(_this.weight, "weight", "withWeight(weight)");
    });

    _defineProperty(this, "payload", function () {
      return {
        concept: _this.concept,
        definition: _this.definition,
        weight: _this.weight
      };
    });

    _defineProperty(this, "do", function () {
      _this.validate();

      if (_this.errors.length > 0) {
        return Promise.reject(new Error("invalid usage: " + _this.errors.join(", ")));
      }

      var path = "/modules/text2vec-contextionary/extensions";
      return _this.client.post(path, _this.payload());
    });

    this.client = client;
    this.errors = [];
  };

  var ConceptsGetter = function ConceptsGetter(client) {
    var _this = this;

    _classCallCheck(this, ConceptsGetter);

    _defineProperty(this, "validateIsSet", function (prop, name, setter) {
      if (prop == undefined || prop == null || prop.length == 0) {
        _this.errors = [].concat(_toConsumableArray(_this.errors), ["".concat(name, " must be set - set with ").concat(setter)]);
      }
    });

    _defineProperty(this, "withConcept", function (concept) {
      _this.concept = concept;
      return _this;
    });

    _defineProperty(this, "validate", function () {
      _this.validateIsSet(_this.concept, "concept", "withConcept(concept)");
    });

    _defineProperty(this, "do", function () {
      _this.validate();

      if (_this.errors.length > 0) {
        return Promise.reject(new Error("invalid usage: " + _this.errors.join(", ")));
      }

      var path = "/modules/text2vec-contextionary/concepts/".concat(_this.concept);
      return _this.client.get(path);
    });

    this.client = client;
    this.errors = [];
  };

  var c11y = function c11y(client) {
    return {
      conceptsGetter: function conceptsGetter() {
        return new ConceptsGetter(client);
      },
      extensionCreator: function extensionCreator() {
        return new ExtensionCreator(client);
      }
    };
  };

  var app = {
    client: function client(params) {
      // check if the URL is set
      if (!params.host) throw new Error("Missing `host` parameter"); // check if the scheme is set

      if (!params.scheme) throw new Error("Missing `scheme` parameter"); // check if headers are set

      if (!params.headers) params.headers = {};

      var graphqlClient = require("graphql-client")({
        url: params.scheme + "://" + params.host + "/v1/graphql",
        headers: params.headers
      });

      var httpClient = require("./httpClient.js")({
        baseUri: params.scheme + "://" + params.host + "/v1",
        headers: params.headers
      });

      return {
        graphql: graphql(graphqlClient),
        schema: schema(httpClient),
        data: data(httpClient),
        classifications: data$1(httpClient),
        batch: batch(httpClient),
        misc: misc(httpClient),
        c11y: c11y(httpClient)
      };
    },
    // constants
    KIND_THINGS: KIND_THINGS,
    KIND_ACTIONS: KIND_ACTIONS
  };
  module.exports = app;

  return app;

})));
